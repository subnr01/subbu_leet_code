
1. Find the first occurrence of an element using binary search.
2.  Find the last occurrence of an element using binary search3. 
3.  Finding an element in a rotated array
4.  Point of rotation in a sorted array
5.  Search whether a[i] = i
6.  Ciel of a element using binary search
7.  Given an array , in which either the values are only increasing or only decreasing or increasing and then decreasing, 
    How to find the max and min value of such and array?
8.  find min element in a rotated array
9.  Find whether an array is rotated
10. find first missing element


/***********************************************************************************/
Binary search answers

------------------------------------------------------------------
1. Find the first occurrence of an element using binary search.

1. Last occurrence means either mid-1 is not equal to the element or mid is equal to 0

low = 0
high = arrSize - 1 

while low <=  high

  mid = (low + high) / 2

  if arr[mid] == key AND ( mid == 0 OR arr[mid-1] != key )
    return mid
  else if ( key < arr[mid] ) 
    high = mid - 1
  else
    low = mid + 1
  end-if

end-while

--------------------------------------------------------
Find the last occurrence of an element using binary search

1. Last occurrence means either mid+1 is not equal to the element or mid is equal to last

low = 0
high = arrSize - 1 

while low <=  high

  mid = (low + high) / 2

  if arr[mid] == key AND ( mid == (size-1) OR arr[mid+1] != key )
    return mid

  else if ( key < arr[mid]  ) 
    high = mid - 1
  else
    low = mid + 1
  end-if

end-while

--------------------------------------------------------

Finding an element in a rotated array

1. Find the part of the array that is sorted and run binary search to find the element.


public boolean search(int start,int end){
    int mid =(start+end)/2;
    if(start>end)
    {
        return  false;
    }
    if(data[start]<data[end]){
        return this.normalBinarySearch(start, end);
    }
    else{
        //the other part is unsorted.
        return (this.search(start,mid) ||
        this.search(mid+1,end));
    }
}

//Another solution
function search( arr[], key, low, high)

        mid = (low + high) / 2

        // key not present
        if(low > high)
                return -1

        // key found
        if(arr[mid] == key)
                return mid

        // if left half is sorted.
        if(arr[low] <= arr[mid]) {

                // if key is present in left half.
                if (arr[low] <= key && arr[mid] >= key) 
                        return bsearch(arr,key,low,mid-1)

                // if key is not present in left hald..search right half.
                else                 
                        return search(arr,key,mid+1,high)
                end-if

        // if righ half is sorted. 
        else    
                // if key is present in right half.
                if(arr[mid] <= key && arr[high] >= key) 
                        return bsearch(arr,key,mid+1,high)

                // if key is not present in right half..search in left half.
                else
                        return search(arr,key,low,mid-1)
                end-if
        end-if  

end-function



-----------------------------------------------

Point of rotation in a sorted array

1. Keep looking right if the middle value in array is greater than first
2. Keep looking left if the middle value in array is less than first 
3. Finally the loop will end where first == last and mid will be either equal to last

void FindRotationPoint(int values[], int numvalues)
{
    int first =0;
    int last = numvalues-1;
    int middle=0;
    bool moreTosearch= (first<=last);
    while(first<last)
    {
        middle = (first+last)/2;
        if(values[first]>=values[middle]) //Keep looking right if the middle value in array is greater than first
        {
            last = middle;
            cout<<"first>middle: "<<first<<" "<<middle<<" "<<last<<"\n";
        }
        else if (values[middle]>=values[last]) //Keep looking left if the middle value in array is less than first
        {
            first = middle;
            cout<<"middle<last: "<<first<<" "<<middle<<" "<<last<<"\n";
        }
    }
    cout<<middle+1<<endl;
    cout<<values[middle];
}
------------------------------------------------------------

Search whether a[i] = i

nt binarySearch(int arr[], int low, int high)
{
    if(high >= low)
    {
        int mid = (low + high)/2;  /*low + (high - low)/2;*/
        if(mid == arr[mid])
            return mid;
        if(mid > arr[mid])
            return binarySearch(arr, (mid + 1), high);
        else
            return binarySearch(arr, low, (mid -1));
    }
 
    /* Return -1 if there is no Fixed Point */
    return -1;
}

-----------------------------------------------------------------

Ciel of a element using binary search


1. The element may not be present in the array.
2. Find out mid and return if equal
3. If mid element is greater and  mid-1 element is lesser, then return mid.
4. If mid element is lesser and mid+1 element is greater then return mid+1
5. Continue the search with low=mid+1 and high = mid+1;

/* Function to get index of ceiling of x in arr[low..high]*/
int ceilSearch(int arr[], int low, int high, int x)
{
  int mid;    
 
  /* If x is smaller than or equal to the first element,
    then return the first element */
  if(x <= arr[low])
    return low; 
 
  /* If x is greater than the last element, then return -1 */
  if(x > arr[high])
    return -1;  
 
  /* get the index of middle element of arr[low..high]*/
  mid = (low + high)/2;  /* low + (high - low)/2 */
 
  /* If x is same as middle element, then return mid */
  if(arr[mid] == x)
    return mid;
     
  /* If x is greater than arr[mid], then either arr[mid + 1]
    is ceiling of x or ceiling lies in arr[mid+1...high] */ 
  else if(arr[mid] < x)
  {
    if(mid + 1 <= high && x <= arr[mid+1])
      return mid + 1;
    else
      return ceilSearch(arr, mid+1, high, x);
  }
 
  /* If x is smaller than arr[mid], then either arr[mid] 
     is ceiling of x or ceiling lies in arr[mid-1...high] */   
  else
  {
    if(mid - 1 >= low && x > arr[mid-1])
      return mid;
    else    
      return ceilSearch(arr, low, mid - 1, x);
  }
}
-----------------------------------------------------------
Given an array , in which either the values are only increasing or only decreasing or increasing and 
then decreasing, How to find the max and min value of such and array?

1.  If the array is only increasing, then first and last are min and max.
2.  If the array is only decreasing, then first and last are max and min.
3.  If the array is increasing and decreasing, then the minimum is min (first and last). Maximum element is 
    binary seach of array until mid element is not lesser or greater than    
    both mid+1 and mid-1 and max of mid, mid+1, mid-1.



if a[1] < a[2]
  if [end-1] < [end] // only increasing
    min = [1]
    max = [end]
  else
    min = min([1],[end]) // increasing and then decreasing
    max = binarysearch()
else
  min = [end]  //only decreasing
  max = [1]

binarysearch:
take the middle element [mid]
if [mid-1] < [mid] < [mid+1]
  binary search [mid - end]
else if [mid-1] > [mid] > [mid+1]
  binary search [start - mid]
else
  return max([mid-1],[mid],[mid+1]

------------------------------------------------------
find min element in a rotated array

1. rotation point-1 should give the minimum.

int findMin(int* arr, int start, int end)
{
    if(start == end)
        return arr[start];

    int mid = (start+end)/2;

    if(arr[mid] < arr[mid-1])
        return arr[mid];
    else if(arr[mid] < arr[end])
        return findMin(arr, start, mid-1);
    else if(arr[mid] > arr[end])
        return findMin(arr, mid+1, end);
}

----------------------------------------------------------

Given a Sorted array with one missing number. I have to find first missing number. Code was required. I gave solution with o(logn) time complexity.
1) If the first element is not same as its index then return first index
2) Else get the middle index say mid
a) If arr[mid] greater than mid then the required element lies in left half.
b) Else the required element lies in right half.

int findFirstMissing(int array[], int start, int end) {
 
    if(start  > end)
      return end + 1;
 
    if (start != array[start])
      return start;
 
    int mid = (start + end) / 2;
 
    if (array[mid] > mid)
      return findFirstMissing(array, start, mid);
    else
      return findFirstMissing(array, mid + 1, end);
}
