=============================================================

Graph basics:

Graph is a data structure that consists of two components:
1. Finite set of vertices called nodes.
2. A finites set of ordered pair of the form (u,v) called edges 
   that connect two vertices.
   

There are two common representations of Graphs:
1. Adjacency matrix
2. Adjacency list

Adjacency matrix is a 2D matrix of size V*V where V is the number of
vertices in the graph.
Pros: Representation is easier to implement and follow. Removing an edge takes O(1) time. 
Queries like whether there is an edge from vertex ‘u’ to vertex ‘v’ are efficient and can be done O(1).
Cons: Consumes more space O(V^2). Even if the graph is sparse(contains less number of edges), 
it consumes the same space. Adding a vertex is O(V^2) time.


Adjacency list is where an array of linked lists is used. The size of the array
is equal to the number of vertices. This representation is useful in storing 
weighted representation of a graphs. 
Pros: Saves space O(|V|+|E|) . In the worst case, 
there can be C(V, 2) number of edges in a graph thus consuming O(V^2) space. 
Adding a vertex is easier.
Cons: Queries like whether there is an edge from vertex u to vertex v are not 
efficient and can be done O(V).

Graphs and Trees: A graph can contain a cycle unlike a tree. Simply put
a tree is a graph without a cycle. Since a graph can contain a cycle, we
use the visited array to keep track of visited vertices.

===========================================================================================================
BFS: It is an algorithm that for traversing or searching tree or graph data structures. 
It starts at the tree root (or some arbitrary node of a graph, sometimes referred 
to as a 'search key'[1]) and explores the neighbor nodes first, 
before moving to the next level neighbours.
  
Time Complexity: O(|V|+|E|). When the number of vertices in the graph is known ahead 
of time, and additional data structures are used to determine which vertices have already 
been added to the queue, the space complexity can be expressed as O(|V|)

Breadth-first search is complete, but depth-first search is not. When applied to infinite graphs represented implicitly, breadth-first search will eventually find the goal state, but depth-first search may get lost in parts of the graph that have no goal state and never return
https://stackoverflow.com/questions/11468621/why-is-the-time-complexity-of-both-dfs-and-bfs-o-v-e

Some applications of BFS:
1. Copying garbage collection, Cheney's algorithm
2. Finding the shortest path between two nodes u and v, with path length 
measured by number of edges (an advantage over depth-first search)
3. (Reverse) Cuthill–McKee mesh numbering
4. Ford–Fulkerson method for computing the maximum flow in a flow network
5. Serialization/Deserialization of a binary tree vs serialization in sorted order, 
   allows the tree to be re-constructed in an efficient manner.
6. Construction of the failure function of the Aho-Corasick pattern matcher.
7. Testing the bipartiteness of a graph.
===========================================================================================================

DFS:Depth-first search (DFS) is an algorithm for traversing or searching tree or graph data structures.
One starts at the root (selecting some arbitrary node as the root in the case of a graph) and explores 
as far as possible along each branch before backtracking.

Complexity:
https://stackoverflow.com/questions/33664911/how-is-big-o-of-depth-first-search-ove?noredirect=1&lq=1
The complexity depends on its application area. In most cases, it is O(|V| + |E|)
In infinite graphs, there is a search depth which is limited. 

Applications of DFS:
1. Finding connected components.
2. Topological sort
3. Finding bridges in a graph.
4. Finding biconnectivity in graphs.
5. Finding 2/3 connected components.

===========================================================================================================

(1) A tree is an undirected graph in which any two vertices are
connected by exactly one path.

(2) Any connected graph who has n nodes with n-1 edges is a tree.

(3) The degree of a vertex of a graph is the number of
edges incident to the vertex.

(4) A leaf is a vertex of degree 1. An internal vertex is a vertex of
degree at least 2.

(5) A path graph is a tree with two or more vertices that is not
branched at all.

(6) A tree is called a rooted tree if one vertex has been designated
the root.

(7) The height of a rooted tree is the number of edges on the longest
downward path between root and a leaf.
